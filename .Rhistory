setwd("C:/Projetos_DataScience/Projeto1-Deteccao-Fraudes-Cliques-Propaganda-AppMobile")
setwd("C:/Projetos_DataScience/Projeto1-Deteccao-Fraudes-Cliques-Propaganda-AppMobile")
getwd()
library(data.table)
library(ggplot2)
library(corrplot)
library(dplyr)
library(lubridate)
library(gridExtra)
library(caTools)
library(caret)
library(ROSE)
library(rpart)
library(randomForest)
library(C50)
library(e1071)
library(knitr)
library(rmarkdown)
dados <- fread("train_sample.csv", stringsAsFactors = F, sep = ",", header =T)
sum(is.na(dados))
kable(head(dados, 10))
str(dados)
dados$click_time = ymd_hms(dados$click_time)
dados$attributed_time = ymd_hms(dados$attributed_time)
dados$is_attributed <- as.factor(dados$is_attributed)
str(dados)
sum(is.na(dados))
dados$attributed_time <- NULL
kable(sapply(dados, function(x) length(unique(x))) %>%
sort(decreasing = TRUE))
ip <- dados$ip %>%
table() %>%                   # Verifica a quantidade de valores unicos
sort(decreasing = TRUE) %>%   # Ordena por ordem decrescente
head(n = 10L) %>%             # Exibe os 10 IPs que mais fizeram cliques
as.data.frame()               # Converte para formato data.frame
colnames(ip) <- c('ip_x', 'ip_y')
graph1 <- ggplot(ip, aes(x = ip_x, y = ip_y)) +
geom_bar(stat="identity", fill = 'steelblue4') +
ggtitle("IPs que mais clicaram em anuncios")+
xlab("Endereço IP") +
ylab("Numero de cliques")
graph1
app <- dados$app %>%
table() %>%                   # Verifica a quantidade de valores unicos
sort(decreasing = TRUE) %>%   # Ordena por ordem decrescente
head(n = 10L) %>%             # Exibe os 10 apps mais acessados
as.data.frame()               # Converte para formato data.frame
colnames(app) <- c('app_x', 'app_y')
graph2 <- ggplot(app, aes(x = app_x, y = app_y)) +
geom_bar(stat="identity", fill = 'steelblue4') +
ggtitle("Apps mais acessados")+
xlab("App") +
ylab("Quantidade")
graph2
device <- dados$device %>%
table() %>%                   # Verifica a quantidade de valores unicos
sort(decreasing = TRUE) %>%   # Ordena por ordem decrescente
head(n = 5L) %>%              # Exibe os 5 dispositivos mais usados
as.data.frame()               # Converte para formato data.frame
colnames(device) <- c('device_x', 'device_y')
graph3 <- ggplot(device, aes(x = device_x, y = device_y)) +
geom_bar(stat="identity", fill = 'steelblue4') +
ggtitle("Dispositivo mais usado")+
xlab("Dispositivo") +
ylab("Quantidade")
graph3
os <- dados$os %>%
table() %>%                   # Verifica a quantidade de valores unicos
sort(decreasing = TRUE) %>%   # Ordena por ordem decrescente
head(n = 10L) %>%             # Exibe os 10 SO mais usados
as.data.frame()               # Converte para formato data.frame
colnames(os) <- c('os_x', 'os_y')
graph4 <- ggplot(os, aes(x = os_x, y = os_y)) +
geom_bar(stat="identity", fill = 'steelblue4') +
ggtitle("S.O. mais usado")+
xlab("S.O") +
ylab("Quantidade")
graph4
channel <- dados$channel %>%
table() %>%                   # Verifica a quantidade de valores unicos
sort(decreasing = TRUE) %>%   # Ordena por ordem decrescente
head(n = 10L) %>%             # Exibe os 10 canais mais utilizados
as.data.frame()               # Converte para formato data.frame
colnames(channel) <- c('ch_x', 'ch_y')
graph5 <- ggplot(channel, aes(x = ch_x, y = ch_y)) +
geom_bar(stat="identity", fill = 'steelblue4') +
ggtitle("Canais mais utilizados")+
xlab("Canais") +
ylab("Quantidade")
graph5
grid.arrange(graph1, graph2, graph3, graph4, graph5)
prop.table(table(dados$is_attributed))*100
barplot(table(dados$is_attributed),
main = "Balanceamento dos dados",
xlab = '0 = Não fez dowload    1 = Fez download',
ylab = 'Quantidade',
ylim = c (0,100e3))
dados_cor <- dados %>%
mutate_if(is.factor, as.integer)
cor(dados_cor[, -c('click_time')]) %>%
cor(method = 'spearman') %>%
corrplot(method = 'number', diag = FALSE, type = 'lower')
dados_time <- dados[, c('click_time','is_attributed')]
str(dados_time)
kable(head(dados_time))
hora <- hour(dados_time$click_time)
numero_cliques <- dados_time[, .N, by = hora]
numero_cliques
# Plotando gráfico de numero de cliques por hora:
graph6 <- ggplot(numero_cliques, aes(x = hora, y = N)) +
geom_bar(stat="identity", fill="steelblue4")+
ggtitle("Numero de cliques por hora")+
xlab("Hora") +
ylab("Numero de cliques")
graph6
dados_time$hora <- hour(dados_time$click_time)
numero_download <- dados_time[is_attributed == 1, .N,
by = c('hora','is_attributed')]
numero_download
# Plotando gráfico de numero de cliques por hora:
graph7 <- ggplot(numero_download, aes(x = hora, y = N)) +
geom_bar(stat="identity", fill="steelblue4")+
ggtitle("Numero de dowload por hora")+
xlab("Hora") +
ylab("Quantidade de dowload")
graph7
grid.arrange(graph6, graph7)
set.seed(0)
amostra <- sample.split(dados$is_attributed, SplitRatio = 0.7)
dados_treino <- subset(dados, amostra == TRUE)
dados_teste <- subset(dados, amostra == FALSE)
str(dados_treino)
str(dados_teste)
prop.table(table(dados_treino$is_attributed))*100
prop.table(table(dados_teste$is_attributed))*100
modelo1 <- rpart (data = dados_treino,
is_attributed ~ .,
control = rpart.control(cp = .0005))
print(modelo1)
previsao1 <- predict(modelo1, dados_teste, type = 'class')
caret::confusionMatrix(previsao1, dados_teste$is_attributed,
positive = '1')
roc.curve(dados_teste$is_attributed, previsao1, plotit = T, col = "red")
dados_treino$click_time <- as.numeric(dados_treino$click_time)
dados_teste$click_time <- as.numeric(dados_teste$click_time)
str(dados_treino)
str(dados_teste)
rose_treino <- ROSE(is_attributed ~.,
data = dados_treino, seed = 1)$data
prop.table(table(rose_treino$is_attributed))*100
rose_teste <- ROSE(is_attributed ~.,
data = dados_teste, seed = 1)$data
prop.table(table(rose_teste$is_attributed))*100
modelo2 <- rpart (data = rose_treino,
is_attributed ~ .,
control = rpart.control(cp = .0005))
previsao2 <- predict(modelo2, rose_teste, type = 'class')
caret::confusionMatrix(previsao2, rose_teste$is_attributed,
positive = '1')
roc.curve(rose_teste$is_attributed, previsao2, plotit = T, col = "red")
dados_treino_over <- ovun.sample(is_attributed ~ ., data = dados_treino,
method = "over")$data
prop.table(table(dados_treino_over$is_attributed))*100
dados_teste_over <- ovun.sample(is_attributed ~ ., data = dados_teste,
method = "over")$data
prop.table(table(dados_teste_over$is_attributed))*100
modelo3 <- rpart (data = dados_treino_over,
is_attributed ~ .,
control = rpart.control(cp = .0005))
previsao3 <- predict(modelo3, dados_teste_over, type = 'class')
caret::confusionMatrix(previsao3, dados_teste_over$is_attributed,
positive = '1')
roc.curve(dados_teste_over$is_attributed, previsao3, plotit = T, col = "red")
dados_treino_under <- ovun.sample(is_attributed ~ ., data = dados_treino,
method = "under")$data
prop.table(table(dados_treino_under$is_attributed))*100
dados_teste_under <- ovun.sample(is_attributed ~ ., data = dados_teste,
method = "under")$data
prop.table(table(dados_teste_under$is_attributed))*100
modelo4 <- rpart (data = dados_treino_under,
is_attributed ~ .,
control = rpart.control(cp = .0005))
previsao4 <- predict(modelo4, dados_teste_under, type = 'class')
caret::confusionMatrix(previsao4, dados_teste_under$is_attributed,
positive = '1')
roc.curve(dados_teste_under$is_attributed, previsao4, plotit = T, col = "red")
dados_treino_both <- ovun.sample(is_attributed ~ ., data = dados_treino,
method = "both")$data
prop.table(table(dados_treino_both$is_attributed))*100
dados_teste_both <- ovun.sample(is_attributed ~ ., data = dados_teste,
method = "both")$data
prop.table(table(dados_teste_both$is_attributed))*100
modelo5 <- rpart (data = dados_treino_both,
is_attributed ~ .,
control = rpart.control(cp = .0005))
previsao5 <- predict(modelo5, dados_teste_both, type = 'class')
caret::confusionMatrix(previsao5, dados_teste_both$is_attributed,
positive = '1')
roc.curve(dados_teste_both$is_attributed, previsao5, plotit = T, col = "red")
str(dados_teste_over)
str(dados_treino_over)
modelo6 <- randomForest(data = dados_treino_over,
is_attributed ~ .,
ntree = 100,
nodesize = 10)
print(modelo6)
previsao6 <- predict(modelo6, dados_teste_over, type = 'class')
caret::confusionMatrix(previsao6, dados_teste_over$is_attributed,
positive = '1')
roc.curve(dados_teste_over$is_attributed, previsao6, plotit = T, col = "red")
modelo7 <- C5.0(data = dados_treino_over,
is_attributed ~ .)
previsao7 <- predict(modelo7, dados_teste_over, type = 'class')
caret::confusionMatrix(previsao7, dados_teste_over$is_attributed,
positive = '1')
roc.curve(dados_teste_over$is_attributed, previsao7, plotit = T, col = "red")
modelo8 <- naiveBayes(data = dados_treino_over,
is_attributed ~ .)
print(modelo8)
previsao8 <- predict(modelo8, dados_teste_over, type = 'class')
caret::confusionMatrix(previsao8, dados_teste_over$is_attributed,
positive = '1')
roc.curve(dados_teste_over$is_attributed, previsao8, plotit = T, col = "red")
### 2 - Coleta e visualização dos dados:
# Configurando o diretório de trabalho
setwd("C:\Projetos_DataScience\Projeto1-Deteccao-Fraudes-Cliques-Propaganda-AppMobile")
### 2 - Coleta e visualização dos dados:
# Configurando o diretório de trabalho
setwd("C:\Projetos_DataScience\Projeto1-Deteccao-Fraudes-Cliques-Propaganda-AppMobile")
### 2 - Coleta e visualização dos dados:
# Configurando o diretório de trabalho
setwd("C:\Projetos_DataScience\Projeto1-Deteccao-Fraudes-Cliques-Propaganda-AppMobile")
### 2 - Coleta e visualização dos dados:
# Configurando o diretório de trabalho
setwd("C:/Projetos_DataScience/Projeto1-Deteccao-Fraudes-Cliques-Propaganda-AppMobile")
# Verificar o diretório:
getwd()
# Carregando os pacotes:
library(data.table)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(corrplot)
library(dplyr)
library(lubridate)
source('C:/Projetos_DataScience/Projeto1-Deteccao-Fraudes-Cliques-Propaganda-AppMobile/Projeto1_rev1.R')
# Criando a Curva ROC para encontrar a métrica AUC:
roc.curve(dados_teste_over$is_attributed, previsao8, plotit = T, col = "red")
unlink('Projeto_1_cache', recursive = TRUE)
